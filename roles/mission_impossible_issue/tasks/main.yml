- name: Setup issue vars
  set_fact: 
    ISSUE_LABEL: "create_java_class_{{ JAVA_CLASS.classeNomSimple_enUS_stored_string }}"
    ISSUE_TITLE: "Create Java class {{ JAVA_CLASS.classeNomSimple_enUS_stored_string }}"
    MILESTONE_TITLE: Software Development
    COLUMN_NAME: Software Development
- name: "Get milestone by title"
  connection: local
  set_fact:
    MILESTONE_TITLE_JSON: "{{ MILESTONES_JSON.json | json_query(milestone_query) | first | default(omit) }}"
  vars: 
    milestone_query: "[?title=='{{ MILESTONE_TITLE | default(omit) }}'].{title: title, description: description, number: number}"
  tags: always
- name: "Get issue by label {{ ISSUE_LABEL }}"
  connection: local
  uri:
    timeout: 90
    url: "https://api.github.com/repos/{{ GITHUB_ORG }}/{{ GITHUB_REPO_NAME }}/issues?labels={{ ISSUE_LABEL | urlencode() }}"
    return_content: true
    headers:
      Authorization: "token {{ GITHUB_TOKEN }}"
  register: ISSUE_LABEL_JSON
  tags: always
- name: Query Apache Solr for all Java class parts
  uri: 
    url: "http://localhost:8983/solr/computate/select?rows=200&q=*:*&fq=-partEstClasse_indexed_boolean:true&fq=appliNom_indexed_string:opendatapolicing&fq=classeNomCanonique_enUS_indexed_string:{{ JAVA_CLASS.classeNomCanonique_enUS_stored_string }}"
  register: CLASS_PARTS_JSON
- name: Setup issue body
  set_fact: 
    ISSUE_BODY: |
      # Mission {{ JAVA_CLASS.classeNomSimple_enUS_stored_string }}

      ![Mission:Impossible Open Data Policing](https://computate.neocities.org/gif/mission-impossible-opendatapolicing.gif "Mission:Impossible Open Data Policing")

      {% if ISSUE_LABEL_JSON.json[0].assignee.login is defined %}
      ## Agent {{ ISSUE_LABEL_JSON.json[0].assignee.login }}: 

      {% endif %}

      Your mission, should you choose to accept it, is to create a new Java class {{ JAVA_CLASS.hackathonMission_stored_string | default(JAVA_CLASS.classeNomSimpleSuper_enUS_stored_string) }}. 

      ## Red Hat has given the green light to all associates like you to join the Open Data Policing team as an agent. 

      The [Southern Coalition for Social Justice](https://southerncoalition.org/) needs you to solve one of the world's most challenging problems: 

      ## To aggregate, visualize, and publish the public records related to all known traffic stops to make stop, search, and use-of-force data publicly available to ensure transparency. 

      This platform allows users—including those in police management—to easily compare enforcement patterns among individual officers and agencies, 
      evaluate the frequency and efficiency of searches, and monitor for racially disparate enforcement practices.

      ## The day of the operation: Martin Luther King Day, January 18th, 2021

      {% if ISSUE_LABEL_JSON.json[0].assignee.login is defined %}
      Agent {{ ISSUE_LABEL_JSON.json[0].assignee.login }}, you will have one day to complete the mission. 
      {% else %}
      You will have one day to complete the mission. 
      {% endif %}

      - That day is Martin Luther King Day, January 18th, 2021. 
      - You will have 24 hours to complete your mission. 
      - Should you, or any of your force be taken or compromised that day, you must report back as many changes as you have made, and any knowledge of your actions, by pull request or comments on the issue on the board. 

      You will be joining a team of the 
      # boldest
      of all Red Hatters for this mission, who will be at your service. 

      ## The details of your mission: 

      - **The Java package name will be:** {{ JAVA_CLASS.classeNomEnsemble_enUS_stored_string }}
      - **The Java class name will be:** {{ JAVA_CLASS.classeNomSimple_enUS_stored_string }}
      {% if JAVA_CLASS.classeNomSimpleSuperGenerique_enUS_stored_string is defined %}
      - **The Java class will extend:** {{ JAVA_CLASS.classeNomSimpleSuper_enUS_stored_string }}\<{{ JAVA_CLASS.classeNomSimpleSuperGenerique_enUS_stored_string }}\>

      {% elif JAVA_CLASS.classeNomSimpleSuper_enUS_stored_string is defined %}
      - **The Java class will extend:** {{ JAVA_CLASS.classeNomSimpleSuper_enUS_stored_string }}
      {% else %}
      {% endif %}

      ```java
      package {{ JAVA_CLASS.classeNomEnsemble_enUS_stored_string }};

      {% for CLASS_IMPORT in JAVA_CLASS.classeImportations_enUS_stored_strings %}
      import {{ CLASS_IMPORT }};
      {% endfor %}

      /**
      {% if JAVA_CLASS.classeModele_stored_boolean == true %}
       * Model: true
      {% endif %}
      {% if JAVA_CLASS.classeApi_stored_boolean == true %}
       * Stored: true
      {% endif %}
      {% if JAVA_CLASS.classeIndexe_stored_boolean == true %}
       * Indexed: true
      {% endif %}
      {% if JAVA_CLASS.classeSauvegarde_stored_boolean == true %}
       * Saved: true
      {% endif %}
      {% if JAVA_CLASS.classeApiUri_enUS_stored_string is defined %}

       * ApiUri,enUS: {{ JAVA_CLASS.classeApiUri_enUS_stored_string }}
      {% endif %}
      {% if JAVA_CLASS.classeApiUri_enUS_stored_string is defined %}
       * ApiTag,enUS: {{ JAVA_CLASS.classeApiTag_enUS_stored_string }}
      {% endif %}
      {% if JAVA_CLASS.classeApiMethodes_enUS_stored_strings is defined and JAVA_CLASS.classeApiMethodes_enUS_stored_strings | length > 0 %}

      {% for CLASS_API_METHOD in JAVA_CLASS.classeApiMethodes_enUS_stored_strings %}

      {% if JAVA_CLASS['classeApiUri' ~ CLASS_API_METHOD ~ '_enUS_stored_string'] != JAVA_CLASS['classeApiUri_enUS_stored_string'] %}
       * ApiMethod: {{ CLASS_API_METHOD }}.enUS
       * ApiUri{{ CLASS_API_METHOD }}.enUS: {{ JAVA_CLASS['classeApiUri' ~ CLASS_API_METHOD ~ '_enUS_stored_string'] }}
      {% else %}
       * ApiMethod: {{ CLASS_API_METHOD }}
      {% endif %}
      {% if JAVA_CLASS['classeRoleUtilisateur' ~ CLASS_API_METHOD ~ '_enUS_stored_boolean'] == true %}
       * RoleUtilisateur{{ CLASS_API_METHOD }}.enUS: true
      {% endif %}
      {% if JAVA_CLASS['classePageNomSimple' ~ CLASS_API_METHOD ~ '_enUS_stored_string'] is defined %}
       * Page{{ CLASS_API_METHOD }}.enUS: {{ JAVA_CLASS['classePageNomSimple' ~ CLASS_API_METHOD ~ '_enUS_stored_string'] }}
      {% endif %}
      {% if JAVA_CLASS['classePageSuperNomSimple' ~ CLASS_API_METHOD ~ '_enUS_stored_string'] is defined %}
       * PageSuper{{ CLASS_API_METHOD }}.enUS: {{ JAVA_CLASS['classePageNomSimple' ~ CLASS_API_METHOD ~ '_enUS_stored_string'] }}
      {% endif %}
      {% endfor %}
      {% endif %}
       **/
      {% if JAVA_CLASS.classeNomSimpleSuperGenerique_enUS_stored_string is defined %}
      public class {{ JAVA_CLASS.classeNomSimple_enUS_stored_string }} extends {{ JAVA_CLASS.classeNomSimpleSuper_enUS_stored_string }}<{{ JAVA_CLASS.classeNomSimpleSuperGenerique_enUS_stored_string }}> {
      {% elif JAVA_CLASS.classeNomSimpleSuper_enUS_stored_string is defined and JAVA_CLASS.classeNomSimpleSuper_enUS_stored_string != 'Object' %}
      public class {{ JAVA_CLASS.classeNomSimple_enUS_stored_string }} extends {{ JAVA_CLASS.classeNomSimpleSuper_enUS_stored_string }} {
      {% else %}
      public class {{ JAVA_CLASS.classeNomSimple_enUS_stored_string }} {
      {% endif %}
      }
      ```

      {% for CLASS_PART in CLASS_PARTS_JSON.json.response.docs %}

      {% if CLASS_PART.partEstEntite_stored_boolean is defined %}
      ## Create the {{ CLASS_PART.entiteVar_enUS_stored_string }} entity

      ```java
      {% if CLASS_PART.entiteCouverture_stored_boolean %}
      	protected void _{{ CLASS_PART.entiteVar_enUS_stored_string }}(Wrap<{{ CLASS_PART.entiteNomSimpleComplet_enUS_stored_string }}> {{ CLASS_PART.entiteVarParam_enUS_stored_string }}) {% raw %}{{% endraw %}{{ CLASS_PART.entiteCodeSource_enUS_stored_string }}{% raw %}}{% endraw %}
      {% else %}
      protected void _{{ CLASS_PART.entiteVar_enUS_stored_string }}({{ CLASS_PART.entiteNomSimpleComplet_enUS_stored_string }} {{ CLASS_PART.entiteVarParam_enUS_stored_string }}) {% raw %}{{% endraw %}{{ CLASS_PART.entiteCodeSource_enUS_stored_string }}{% raw %}}{% endraw %}
      {% endif %}
      
      ```
      {% elif CLASS_PART.partEstMethode_stored_boolean is defined %}
      ## Create the {{ CLASS_PART.methodeVar_enUS_stored_string }} method

      ```java
      	{{ CLASS_PART.methodeVar_enUS_stored_string }}(...) {% raw %}{{% endraw %}{{ CLASS_PART.methodeCodeSource_enUS_stored_string }}{% raw %}}{% endraw %}

      ```
      {% elif CLASS_PART.partEstChamp_stored_boolean is defined %}
      ## Create the {{ CLASS_PART.champVar_enUS_stored_string }} field

      ```java
      {% if CLASS_PART.champCodeSource_enUS_stored_string is defined %}
      	{{ CLASS_PART.champNomSimpleComplet_enUS_stored_string }} {{ CLASS_PART.champVar_enUS_stored_string }} = {{ CLASS_PART.champCodeSource_enUS_stored_string }};
      {% else %}
      	{{ CLASS_PART.champNomSimpleComplet_enUS_stored_string }} {{ CLASS_PART.champVar_enUS_stored_string }};
      {% endif %}
      ```
      {% endif %}
      {% endfor %}

      ![This message will not self-destruct. ](https://computate.neocities.org/png/mission-impossible-message.png "This message will not self-destruct. ")

      # This message will not self destruct, because this project is open source. 

  tags: 
    - "class{{ JAVA_CLASS.classeNomSimple_enUS_stored_string }}"

- block: 
    - name: "Create issue by label {{ ISSUE_LABEL }}"
      connection: local
      uri:
        timeout: 90
        url: "https://api.github.com/repos/{{ GITHUB_ORG }}/{{ GITHUB_REPO_NAME }}/issues"
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "token {{ GITHUB_TOKEN }}"
        body_format: json
        body: 
          labels: 
            - "{{ ISSUE_LABEL }}"
          title: "{{ ISSUE_TITLE }}"
          body: "{{ ISSUE_BODY }}"
          milestone: "{{ MILESTONE_TITLE_JSON.number | default(omit) }}"
        status_code: 
          - 200
          - 201
      register: ISSUE_CREATE_JSON
      tags: always
    - name: Create card
      include_role: 
        name: computate_org_card
      vars: 
        CARD_CONTENT_ID: "{{ ISSUE_CREATE_JSON.json.id }}"
      tags: always
  connection: local
  when: COLUMN_NAME is defined and MILESTONE_TITLE_JSON is defined and (ISSUE_LABEL_JSON.json | length == 0)
  tags: always
- block: 
    - name: "Create issue by label {{ ISSUE_LABEL }}"
      connection: local
      uri:
        timeout: 90
        url: "https://api.github.com/repos/{{ GITHUB_ORG }}/{{ GITHUB_REPO_NAME }}/issues"
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "token {{ GITHUB_TOKEN }}"
        body_format: json
        body: 
          labels: 
            - "{{ ISSUE_LABEL }}"
          title: "{{ ISSUE_TITLE }}"
          body: "{{ ISSUE_BODY }}"
        status_code: 
          - 200
          - 201
      register: ISSUE_CREATE_JSON
      tags: always
    - name: Create card
      include_role: 
        name: computate_org_card
      vars: 
        CARD_CONTENT_ID: "{{ ISSUE_CREATE_JSON.json.id }}"
      tags: always
  connection: local
  when: COLUMN_NAME is defined and MILESTONE_TITLE_JSON is not defined and (ISSUE_LABEL_JSON.json | length == 0)
  tags: always

- block: 
    - name: "Update issue by label {{ ISSUE_LABEL }}"
      connection: local
      uri:
        timeout: 90
        url: "https://api.github.com/repos/{{ GITHUB_ORG }}/{{ GITHUB_REPO_NAME }}/issues/{{ ISSUE_LABEL_JSON.json[0].number }}"
        method: PATCH
        headers:
          Content-Type: "application/json"
          Authorization: "token {{ GITHUB_TOKEN }}"
        body_format: json
        body: 
          labels: 
            - "{{ ISSUE_LABEL }}"
          title: "{{ ISSUE_TITLE }}"
          body: "{{ ISSUE_BODY }}"
          milestone: "{{ MILESTONE_TITLE_JSON.number | default(omit) }}"
      register: ISSUE_CREATE_JSON
      tags: always
    - name: Create card
      include_role: 
        name: computate_org_card
      vars: 
        CARD_CONTENT_ID: "{{ ISSUE_CREATE_JSON.json.id }}"
      tags: always
  connection: local
  when: COLUMN_NAME is defined and MILESTONE_TITLE_JSON is defined and (ISSUE_LABEL_JSON.json | length > 0)
  tags: always
- block: 
    - name: "Update issue by label {{ ISSUE_LABEL }}"
      connection: local
      uri:
        timeout: 90
        url: "https://api.github.com/repos/{{ GITHUB_ORG }}/{{ GITHUB_REPO_NAME }}/issues/{{ ISSUE_LABEL_JSON.json[0].number }}"
        method: PATCH
        headers:
          Content-Type: "application/json"
          Authorization: "token {{ GITHUB_TOKEN }}"
        body_format: json
        body: 
          labels: 
            - "{{ ISSUE_LABEL }}"
          title: "{{ ISSUE_TITLE }}"
          body: "{{ ISSUE_BODY }}"
      register: ISSUE_CREATE_JSON
      tags: always
    - name: Create card
      include_role: 
        name: computate_org_card
      vars: 
        CARD_CONTENT_ID: "{{ ISSUE_CREATE_JSON.json.id }}"
      tags: always
  connection: local
  when: COLUMN_NAME is defined and MILESTONE_TITLE_JSON is not defined and (ISSUE_LABEL_JSON.json | length > 0)
  tags: always
