---
- name: Check for GITHUB_TOKEN var
  fail: 
    msg: "Make sure you have correctly configured a GITHUB_TOKEN: '...' in your ansible vault. You will want to configure a Github token with 'admin:org' and 'repo' scopes (https://github.com/settings/tokens). "
  when: GITHUB_TOKEN is not defined
  tags: github_token
- name: Check for GITHUB_ORG var
  connection: local
  fail: 
    msg: "Make sure you have correctly configured a GITHUB_ORG: '...' in your ansible vault. This should be a Github organization that your user and token have access to (https://github.com/organizations/plan). "
  when: GITHUB_ORG is not defined
  tags: github_org
- name: "Get Github org {{ GITHUB_ORG }}"
  connection: local
  uri: 
    url: "https://api.github.com/orgs/{{ GITHUB_ORG }}"
    return_content: true
    headers: 
      Authorization: "token {{ GITHUB_TOKEN }}"
  ignore_errors: true
  register: "{{ 'GITHUB_ORG_JSON' if GITHUB_ORG_JSON is not defined else 'IGNORE_VAR' }}"
  when: GITHUB_ORG_JSON is not defined
  tags: github_org
- name: Check Github token
  connection: local
  fail: 
    msg: "Make sure you have correctly configured a GITHUB_TOKEN: '...' in your ansible vault. You will want to configure a Github token with 'admin:org' and 'repo' scopes (https://github.com/settings/tokens). You are using GITHUB_TOKEN: {{ GITHUB_TOKEN }}"
  when: GITHUB_ORG_JSON.failed and (GITHUB_ORG_JSON.status is not defined or GITHUB_ORG_JSON.status == 401)
  tags: github_token
- name: Check for Github org
  connection: local
  fail: 
    msg: "Make sure you have correctly configured a GITHUB_ORG: '...' in your ansible vault. This should be a Github organization that your user and token have access to (https://github.com/organizations/plan). You are using GITHUB_ORG: {{ GITHUB_ORG }}"
  when: GITHUB_ORG_JSON.failed and GITHUB_ORG_JSON.status == 404
  tags: github_org

############
# Projects #
############

- name: Check for hard coded PROJECTS_JSON
  set_fact: 
    PROJECTS_JSON_HARD: "{{ PROJECTS_JSON }}"
  when: PROJECTS_JSON is defined
- name: "Get project by name {{ PROJECT_NAME | default(omit) }}"
  connection: local
  set_fact:
    PROJECT_NAME_JSON: "{{ PROJECTS_JSON.json | json_query(project_query) | first }}"
  vars: 
    project_query: "[?name=='{{ PROJECT_NAME | default(omit) }}'].{name: name, description: description, id: id}"
  when: PROJECTS_JSON is defined
- block:
    - name: "Get projects"
      connection: local
      uri:
        timeout: 90
        url: "https://api.github.com/orgs/{{ GITHUB_ORG }}/projects"
        return_content: true
        headers:
          Authorization: "token {{ GITHUB_TOKEN }}"
          Accept: "application/vnd.github.inertia-preview+json"
      register: PROJECTS_JSON
      when: PROJECTS_JSON is not defined
    - name: "Get project by name {{ PROJECT_NAME | default(omit) }}"
      connection: local
      set_fact:
        PROJECT_NAME_JSON: "{{ PROJECTS_JSON.json | json_query(project_query) | first }}"
      when: PROJECTS_JSON.json | json_query(project_query)
      vars: 
        project_query: "[?name=='{{ PROJECT_NAME | default(omit) }}'].{name: name, description: description, id: id}"
    - name: "Create project {{ PROJECT_NAME }}"
      include_role: 
        name: computate_org_project
      tags: 
        - project
    - name: "Get projects"
      connection: local
      uri:
        timeout: 90
        url: "https://api.github.com/orgs/{{ GITHUB_ORG }}/projects"
        return_content: true
        headers:
          Authorization: "token {{ GITHUB_TOKEN }}"
          Accept: "application/vnd.github.inertia-preview+json"
      register: PROJECTS_JSON
      tags: always
      when: PROJECTS_JSON_HARD is not defined
    - name: "Get project by name {{ PROJECT_NAME | default(omit) }}"
      connection: local
      set_fact:
        PROJECT_NAME_JSON: "{{ PROJECTS_JSON.json | json_query(project_query) | first }}"
      when: PROJECTS_JSON_HARD is not defined and PROJECTS_JSON.json | json_query(project_query)
      vars: 
        project_query: "[?name=='{{ PROJECT_NAME | default(omit) }}'].{name: name, description: description, id: id}"
      tags: always
  when: PROJECTS_JSON_HARD is not defined

###########
# Columns #
###########

- name: Check for hard coded COLUMNS_JSON
  set_fact: 
    COLUMNS_JSON_HARD: "{{ COLUMNS_JSON }}"
  when: COLUMNS_JSON is defined
- block: 
    - name: "Get columns"
      connection: local
      uri:
        timeout: 90
        url: "https://api.github.com/projects/{{ PROJECT_NAME_JSON.id }}/columns"
        return_content: true
        headers:
          Authorization: "token {{ GITHUB_TOKEN }}"
          Accept: "application/vnd.github.inertia-preview+json"
      register: COLUMNS_JSON_TEMP
    - set_fact: 
        COLUMNS_JSON: "{{ COLUMNS_JSON_TEMP }}"
    
    - name: Create column for setup issues
      include_role: 
        name: computate_org_column
      vars: 
        COLUMN_NAME: Setup Tasks
      tags: 
        - column
    - name: Create column for OpenShift Deployment issues
      include_role: 
        name: computate_org_column
      vars: 
        COLUMN_NAME: OpenShift Deployment
      tags: 
        - column
    - name: Create column for Data Development issues
      include_role: 
        name: computate_org_column
      vars: 
        COLUMN_NAME: Data Development
      tags: 
        - column
    - name: Create column for software development issues
      include_role: 
        name: computate_org_column
      vars: 
        COLUMN_NAME: Software Development
      tags: 
        - column
    - name: Create column for Data Backup/Restore
      include_role: 
        name: computate_org_column
      vars: 
        COLUMN_NAME: Data Backup/Restore
      tags: 
        - column
    - name: Create column for Automate Database Deployment
      include_role: 
        name: computate_org_column
      vars: 
        COLUMN_NAME: Automate Database Deployment
      tags: 
        - column
    - name: Create column for Automate Cluster Manager Deployment
      include_role: 
        name: computate_org_column
      vars: 
        COLUMN_NAME: Automate Cluster Manager Deployment
      tags: 
        - column
    - name: Create column for Automate Search Engine Deployment
      include_role: 
        name: computate_org_column
      vars: 
        COLUMN_NAME: Automate Search Engine Deployment
      tags: 
        - column
    - name: Create column for Automate Project Deployment
      include_role: 
        name: computate_org_column
      vars: 
        COLUMN_NAME: Automate Project Deployment
      tags: 
        - column
    - name: Create column for Automate SSO Deployment
      include_role: 
        name: computate_org_column
      vars: 
        COLUMN_NAME: Automate SSO Deployment
      tags: 
        - column
    - name: Create column for Create Static Content
      include_role: 
        name: computate_org_column
      vars: 
        COLUMN_NAME: Create Static Content
      tags: 
        - column

    - name: "Get columns"
      connection: local
      uri:
        timeout: 90
        url: "https://api.github.com/projects/{{ PROJECT_NAME_JSON.id }}/columns"
        return_content: true
        headers:
          Authorization: "token {{ GITHUB_TOKEN }}"
          Accept: "application/vnd.github.inertia-preview+json"
      tags: always
      register: COLUMNS_JSON_TEMP
    - set_fact: 
        COLUMNS_JSON: "{{ COLUMNS_JSON_TEMP }}"
  when: COLUMNS_JSON_HARD is not defined

##############
# Milestones #
##############

- name: Check for hard coded MILESTONES_JSON
  set_fact: 
    MILESTONES_JSON_HARD: "{{ MILESTONES_JSON }}"
  when: MILESTONES_JSON is defined
- block: 
    - name: "Get milestones"
      connection: local
      uri:
        timeout: 90
        url: "https://api.github.com/repos/{{ GITHUB_ORG }}/{{ GITHUB_REPO_NAME }}/milestones"
        return_content: true
        headers:
          Authorization: "token {{ GITHUB_TOKEN }}"
      register: MILESTONES_JSON_TEMP
    - set_fact: 
        COLUMNS_JSON: "{{ MILESTONES_JSON_TEMP }}"
    
    - name: Create milestone for setup issues
      include_role: 
        name: computate_org_milestone
      vars: 
        MILESTONE_TITLE: Setup Tasks
        MILESTONE_DESCRIPTION: |
          Setup Tasks issues including setting up the OpenShift cluster, installing Ansible locally, defining the ansible vault for the group and other setup tasks. 
      tags: 
        - milestone
    - name: Create milestone for OpenShift Deployment issues
      include_role: 
        name: computate_org_milestone
      vars: 
        MILESTONE_TITLE: OpenShift Deployment
        MILESTONE_DESCRIPTION: |
          Deploying applications to OpenShift manually. 
      tags: 
        - milestone
    - name: Create milestone for Data Development issues
      include_role: 
        name: computate_org_milestone
      vars: 
        MILESTONE_TITLE: Data Development
        MILESTONE_DESCRIPTION: |
          Creating, restoring and backing up data in the site. 
      tags: 
        - milestone
    - name: Create milestone for Data Backup/Restore issues
      include_role: 
        name: computate_org_milestone
      vars: 
        MILESTONE_TITLE: Data Backup/Restore
        MILESTONE_DESCRIPTION: |
          Data Backup/Restore
      tags: 
        - milestone
    - name: Create milestone for Automate Database Deployment issues
      include_role: 
        name: computate_org_milestone
      vars: 
        MILESTONE_TITLE: Automate Database Deployment
        MILESTONE_DESCRIPTION: |
          Automate Database Deployment
      tags: 
        - milestone
    - name: Create milestone for Automate Cluster Manager Deployment issues
      include_role: 
        name: computate_org_milestone
      vars: 
        MILESTONE_TITLE: Automate Cluster Manager Deployment
        MILESTONE_DESCRIPTION: |
          Automate Cluster Manager Deployment
      tags: 
        - milestone
    - name: Create milestone for Automate Search Engine Deployment issues
      include_role: 
        name: computate_org_milestone
      vars: 
        MILESTONE_TITLE: Automate Search Engine Deployment
        MILESTONE_DESCRIPTION: |
          Automate Search Engine Deployment
      tags: 
        - milestone
    - name: Create milestone for Automate Project Deployment issues
      include_role: 
        name: computate_org_milestone
      vars: 
        MILESTONE_TITLE: Automate Project Deployment
        MILESTONE_DESCRIPTION: |
          Automate Project Deployment
      tags: 
        - milestone
    - name: Create milestone for Automate SSO Deployment issues
      include_role: 
        name: computate_org_milestone
      vars: 
        MILESTONE_TITLE: Automate SSO Deployment
        MILESTONE_DESCRIPTION: |
          Automate SSO Deployment
      tags: 
        - milestone
    - name: Create milestone for Create Static Content issues
      include_role: 
        name: computate_org_milestone
      vars: 
        MILESTONE_TITLE: Create Static Content
        MILESTONE_DESCRIPTION: |
          Create Static Content
      tags: 
        - milestone
    
    - name: "Get milestones"
      connection: local
      uri:
        timeout: 90
        url: "https://api.github.com/repos/{{ GITHUB_ORG }}/{{ GITHUB_REPO_NAME }}/milestones"
        return_content: true
        headers:
          Authorization: "token {{ GITHUB_TOKEN }}"
      tags: always
      register: MILESTONES_JSON_TEMP
    - set_fact: 
        COLUMNS_JSON: "{{ MILESTONES_JSON_TEMP }}"
  when: MILESTONES_JSON_HARD is not defined
#
#####################################
## OpenShift Cluster Administration #
#####################################
#
#- name: Create issue to setup OpenShift cluster
#  include_role: 
#    name: computate_org_issue
#  vars: 
#    ISSUE_LABEL: setup_openshift_cluster
#    ISSUE_TITLE: Setup OpenShift cluster
#    MILESTONE_TITLE: Setup Tasks
#    COLUMN_NAME: Setup Tasks
#    ISSUE_BODY: |
#      Red Hat employees can obtain a free OpenShift cluster with 4GiB RAM and 10 GiB storage with their people manager approval here: 
#
#      https://employee.openshift.com/register/employee/introduction
#
#      You may also obtain an OpenShift cluster by registering for a course that provisions a temporary OpenShift environment. 
#  tags: 
#    - issue_label
#    - issue_label_102
#
#- name: "Create issue to create an OpenShift project"
#  include_role: 
#    name: computate_org_issue
#  vars: 
#    ISSUE_LABEL: create_openshift_project
#    ISSUE_TITLE: "Create an OpenShift project"
#    MILESTONE_TITLE: Setup Tasks
#    COLUMN_NAME: Setup Tasks
#    ISSUE_BODY: |
#      As a team, create an OpenShift project and share the project with the team. 
#
#      * Login to your OpenShift environment here: {{ REDHAT_OPENSHIFT_HOST }}
#      * Create a new OpenShift project named: {{ REDHAT_OPENSHIFT_NAMESPACE }}
#      
#      ### Share the OpenShift project with the other users
#
#      * You can find your Red Hat Login ID by logging into this site here: https://sso.redhat.com/auth/realms/redhat-external/account/
#      * You can add your Red Hat Login ID to your list of login IDs (REDHAT_OPENSHIFT_LOGIN_IDS) to the project here if you want to regenerate this issue in Github: {{ GITHUB_REPO_PATH }}/roles/computate_org_github/defaults/main.yml
#      {% if REDHAT_OPENSHIFT_MANAGE_HOST != 'https://employee.openshift.com' %}
#      * Now sign in to this site to add users to an OpenShift environment: {{ REDHAT_OPENSHIFT_MANAGE_HOST }}
#        * Click on "Manage Subscription" under the cluster you wish to add them to.
#        * Click the "Manage" link beside Collaborators. 
#        * On the collaborator page, enter the Red Hat Login ID for the user in the username field and click Add collaborator: 
#      {% for LOGIN_ID in REDHAT_OPENSHIFT_LOGIN_IDS %}
#        * {{ LOGIN_ID }}
#      {% endfor %}
#      {% endif %}
#      * Visit the OpenShift environment, click on your user name in the top right corner, and select "Copy Login Command" here: {{ REDHAT_OPENSHIFT_HOST }}
#      * Paste that login command into a terminal. 
#      * Follow these steps to add the login IDs to the project: 
#
#      ```bash
#      oc project {{ REDHAT_OPENSHIFT_NAMESPACE }}
#      {% for LOGIN_ID in REDHAT_OPENSHIFT_LOGIN_IDS %}
#      oc policy add-role-to-user view {{ LOGIN_ID }}
#      {% endfor %}
#      ```
#
#      You can visit this site for more information: https://www.openshift.com/blog/add-collaborators-openshift-online-pro-account
#  tags: 
#    - issue_label
#    - issue_label_103
#
#- name: "Create issue to create an ansible vault for OpenShift"
#  include_role: 
#    name: computate_org_issue
#  vars: 
#    ISSUE_LABEL: create_openshift_ansible_vault
#    ISSUE_TITLE: "Create an ansible vault for OpenShift"
#    MILESTONE_TITLE: Setup Tasks
#    COLUMN_NAME: Setup Tasks
#    ISSUE_BODY: |
#      ### Create an ansible vault for your OpenShift.
#      
#      As a team, create and edit an encrypted ansible vault with a password for the host secrets for your shared OpenShift inventory.
#      
#      ```bash
#      install -d {{ ANSIBLE_REPO_PATH }}/inventories/openshift/host_vars/localhost/
#      ansible-vault create {{ ANSIBLE_REPO_PATH }}/inventories/openshift/host_vars/localhost/vault
#      ansible-vault edit {{ ANSIBLE_REPO_PATH }}/inventories/openshift/host_vars/localhost/vault
#      ```
#      
#      The contents of the vault will contain the secrets needed to override any default values you want to change in the app defaults defined here.
#      
#      https://github.com/computate/computate/blob/master/ansible/roles/{{ APP_NAME_ANSIBLE }}_openshift_enUS/defaults/main.yml
#      
#      There are descriptions for each of the fields.
#      There are several sections of fields, including:
#      
#      - app system defaults
#      - Ansible defaults
#      - Zookeeper defaults
#      - Solr defaults
#      - PostgreSQL defaults
#      - computate-medical global defaults
#      - app US English defaults
#      - SMTP defaults
#      - OpenID Connect auth server defaults
#      - SSL/TLS defaults
#
#      Here is an example of the contents of the ansible vault for OpenShift: 
#
#      ```yaml
#      {{ lookup('url', 'https://raw.githubusercontent.com/computate/computate/master/ansible/roles/{{ APP_NAME_ANSIBLE }}_openshift_enUS/defaults/main.yml', split_lines=false) }}
#      ```
#
#      Look for values to override, especially those like this: "...". 
#  tags: 
#    - issue_label
#    - issue_label_106
#
#- name: "Create issue to create OpenShift ansible hosts file"
#  include_role: 
#    name: computate_org_issue
#  vars: 
#    ISSUE_LABEL: create_openshift_ansible_hosts
#    ISSUE_TITLE: "Create OpenShift ansible hosts file"
#    MILESTONE_TITLE: OpenShift Deployment
#    COLUMN_NAME: OpenShift Deployment
#    ISSUE_BODY: |
#      
#      Create a directory for your OpenShift inventory.
#      
#      ```bash
#      install -d {{ ANSIBLE_REPO_PATH }}/inventories/openshift
#      ```
#      
#      Create a hosts file for your OpenShift inventory. Add "localhost" to each of the following host groups so that ansible can run each of these playbooks on your localhost. 
#      
#      ```bash
#      echo "
#
#      localhost
#
#      [redhat_sso_openshift]
#      localhost
#
#      [postgres_openshift]
#      localhost
#
#      [computate_zookeeper_openshift]
#      localhost
#
#      [computate_solr_openshift]
#      localhost
#
#      [computate_certbot]
#      localhost
#
#      [{{ APP_NAME_ANSIBLE }}_openshift_enUS]
#      localhost
#
#      [{{ APP_NAME_ANSIBLE }}_login]
#      localhost
#
#      [{{ APP_NAME_ANSIBLE }}_refresh]
#      localhost
#
#      [{{ APP_NAME_ANSIBLE }}_backup]
#      localhost
#
#      [{{ APP_NAME_ANSIBLE }}_restore]
#      localhost
#      " > {{ ANSIBLE_REPO_PATH }}/inventories/openshift/hosts
#      ```
#  tags: 
#    - issue_label
#    - issue_label_401
#
#- name: "Create issue to automate the install of the application to OpenShift"
#  include_role: 
#    name: computate_org_issue
#  vars: 
#    ISSUE_LABEL: automate_openshift_app
#    ISSUE_TITLE: "Automate the install of the application to OpenShift"
#    MILESTONE_TITLE: OpenShift Deployment
#    COLUMN_NAME: OpenShift Deployment
#    ISSUE_BODY: |
#      As a team, automate the install of the application to OpenShift. 
#
#      #### Run the playbook to install the application to OpenShift.
#      
#      ```bash
#      (cd /usr/local/src/{{ PROJECT_NAME }}/ansible && ansible-playbook {{ APP_NAME_ANSIBLE }}_openshift_enUS.yml -i {{ ANSIBLE_REPO_PATH }}/inventories/openshift/hosts --vault-id @prompt)
#      ```
#  tags: 
#    - issue_label
#    - issue_label_402

  ########################
  # Software Development #
  ########################

- name: Query Apache Solr for all Java classes
  uri: 
#    url: "http://localhost:8983/solr/computate/select?rows=200&q=*:*&fq=partEstClasse_indexed_boolean:true&fq=appliNom_indexed_string:opendatapolicing&fq=classeNomCanonique_enUS_indexed_string:com.opendatapolicing.enus.trafficstop.TrafficStop"
#    url: "http://localhost:8983/solr/computate/select?rows=200&q=*:*&fq=partEstClasse_indexed_boolean:true&fq=appliNom_indexed_string:opendatapolicing&fq=classeNomCanonique_enUS_indexed_string:com.opendatapolicing.enus.wrap.Wrap"
#    url: "http://localhost:8983/solr/computate/select?rows=200&q=*:*&fq=partEstClasse_indexed_boolean:true&fq=appliNom_indexed_string:opendatapolicing&fq=classeNomCanonique_enUS_indexed_string:com.opendatapolicing.enus.main.pom.PomXml"
#    url: "http://localhost:8983/solr/computate/select?rows=200&q=*:*&fq=partEstClasse_indexed_boolean:true&fq=appliNom_indexed_string:opendatapolicing&fq=classeNomCanonique_enUS_indexed_string:com.opendatapolicing.enus.main.pom.TouchSh"
#    url: "http://localhost:8983/solr/computate/select?rows=200&q=*:*&fq=partEstClasse_indexed_boolean:true&fq=appliNom_indexed_string:opendatapolicing&fq=classeNomSimple_enUS_indexed_string:Roles_generate_static_classes_tasks_generate_static_class"
#    url: "http://localhost:8983/solr/computate/select?rows=200&q=*:*&fq=partEstClasse_indexed_boolean:true&fq=appliNom_indexed_string:opendatapolicing&fq=classeNomEnsemble_enUS_indexed_string:com.opendatapolicing.enus.ansible&fq=classeNomSimple_enUS_indexed_string:Roles_project_openshift_templates_project_route"
#    url: "http://localhost:8983/solr/computate/select?rows=200&q=*:*&fq=partEstClasse_indexed_boolean:true&fq=appliNom_indexed_string:opendatapolicing&fq=classeNomEnsemble_enUS_indexed_string:com.opendatapolicing.enus.ansible"
    url: "http://localhost:8983/solr/computate/select?rows=300&q=*:*&fq=partEstClasse_indexed_boolean:true&fq=appliNom_indexed_string:opendatapolicing&fq=classeTraduire_indexed_boolean:true"
  register: JAVA_CLASSES
- name: "Create issues for the {{ JAVA_CLASSES.json.response.docs | length }} Java classes"
  include_role: 
    name: mission_impossible_issue
  vars: 
    JAVA_CLASS: "{{ item }}"
    CLASS_DISPLAY_NAME: "{{ item | json_query('classeNomAffichage_enUS_stored_string') | replace('{{', '\\{\\{') | replace('}}', '\\}\\}') | default(omit) }}"
  when: item.classeNomSimple_enUS_stored_string not in ['Roles_generate_static_classes_tasks_generate_static_class', 'Roles_generate_static_classes_tasks_main', 'Generate_static_classes']
  loop: "{{ JAVA_CLASSES.json.response.docs }}"
